/***************************************************************
 mainwindow.h
 Copyright (c) Carleton College CS312 free open source
 Assignment: hw922
 Stritzel Matt stritzelm@carleton.edu
 Brown Cam brownc@carleton.edu
 DATE: 2020-03-10
 TIME: 13:13:46
 ****************************************************************/

#ifndef MAINWINDOW_H
#define MAINWINDOW_H

#include "qcustomplot.h"
#include <QMainWindow>

//#ifndef ADSR_H
//#include "adsr.h"
//#endif

#ifndef RTAUDIOUTILS_H_
#include "rtaudioutils.h"
#endif

// In one millisecond there are 44100/1000 samples.
const double kSamplesPerMs = 44.1;
// Implementing a state variable machine with four states
const int kAtkState = 0;
const int kDcyState = 1;
const int kSusState = 2;
const int kRlsState = 3;
// Keep track of current state
extern int adsrState;

// Envelope Attack starts with isKeyDown
extern bool isKeyDown;
// Envelope Release starts with isKeyUp
extern bool isKeyUp;
// end of Release portion sets isNoteOver = true
// sineADSRcallback returns callbackReturnValue with isNoteOver
extern bool isNoteOver;

// initial startup values
// amplitude level for steady state Sustain
extern MY_TYPE sustain_amplitude;
// frequency of first piano key button (Middle C)
extern MY_TYPE freq;
// value is calculated for every sample in each ADSR state
extern MY_TYPE envAmp;
// Maximum amplitude of sine wave generated by isKeyDown
extern MY_TYPE sliderVolume;
// count of every sample during all callbacks
extern int count;

// Time in milliseconds for the Attack, Decay, and Release
// ADSR segments based on their slider values
extern int atk_in_ms;
extern int decay_in_ms;
extern int release_in_ms;

// Calculations where each ADSR segment begins and ends
// in sample indices based on ms time of slider settings
extern int atk_start_samp;
extern int atk_end_samp;
extern int decay_start_samp;
extern int decay_end_samp;
extern int sampStartS;
extern int release_samps;
extern int sampStartR;
extern int sampEndR;

// Calculation of the increment needed to take the
// Attack portion from 0-1 over length in samples
// of Attack segment
extern double attackInc;
// Calculation of the increment needed to take the
// Decay portion from 1 down to Sustain level over
// length in samples in Decay segment
extern double decayInc;
// Calculation of the increment needed to take the
// Release portion from Sustain level to 0 over
// length in samples of Release segment after isKeyUp.
extern double releaseInc;

// The number of x axis points in the ADSR plot
const int kEnvLength = 88200; // 2 seconds
// vector to hold the y axis values for the ADSR plot
extern std::vector<MY_TYPE> venv;

QT_BEGIN_NAMESPACE
namespace Ui
{
class MainWindow;
}
QT_END_NAMESPACE

class MainWindow : public QMainWindow
{
    Q_OBJECT

  public:
    MainWindow( QWidget* parent = nullptr );
    ~MainWindow();

  private slots:
    void on_verticalSlider_A_valueChanged( int value );

    void on_verticalSlider_D_valueChanged( int value );

    void on_verticalSlider_SL_valueChanged( int value );

    void on_verticalSlider_R_valueChanged( int value );

    void on_pushButton_Stop_clicked();

    void on_pushButton_quit_clicked();

    void on_verticalSlider_volume_valueChanged( int value );

    void on_comboBox_currentIndexChanged( int index );

    void on_toolButton_loC_pressed();
    void on_toolButton_loC_released();
    void on_toolButton_Db_pressed();
    void on_toolButton_Db_released();
    void on_toolButton_D_pressed();
    void on_toolButton_D_released();
    void on_toolButton_Eb_pressed();
    void on_toolButton_Eb_released();
    void on_toolButton_E_pressed();
    void on_toolButton_E_released();
    void on_toolButton_F_pressed();
    void on_toolButton_F_released();
    void on_toolButton_Gb_pressed();
    void on_toolButton_Gb_released();
    void on_toolButton_G_pressed();
    void on_toolButton_G_released();
    void on_toolButton_Ab_pressed();
    void on_toolButton_Ab_released();
    void on_toolButton_A_pressed();
    void on_toolButton_A_released();
    void on_toolButton_Bb_pressed();
    void on_toolButton_Bb_released();
    void on_toolButton_B_pressed();
    void on_toolButton_B_released();
    void on_toolButton_hiC_pressed();
    void on_toolButton_hiC_released();

  private:
    Ui::MainWindow* ui;

    RtAudio dac;

    MY_TYPE ampSlider;
    int MIDIstartNote;

    void init_controls();
    void calcADSR_start_end_points();
    void open_dac_stream();
    // dac stream will be closed in destructor
    MY_TYPE midi2frequency( const int midiNote );
    void playNote( const int n );
    void stopNote();
    std::vector<MY_TYPE> stuffEnvelopeVector();
    void plotEnvelope();

    static int sineADSRCallback( void* outputBuffer, void* /*inputBuffer*/, unsigned int nBufferFrames,
                                 double /*streamTime*/, RtAudioStreamStatus status, void* /*userData*/ );
};
#endif // MAINWINDOW_H
